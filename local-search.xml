<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>优化常数技巧</title>
    <link href="/2023/01/29/%E4%BC%98%E5%8C%96%E5%B8%B8%E6%95%B0%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/01/29/%E4%BC%98%E5%8C%96%E5%B8%B8%E6%95%B0%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/oierwa-Luogu/p/10323959.html">技巧1</a></p><p>好久不搞了，强调一下：过不去的题花里胡哨基本也过不去。如果利用这些技巧过了，纯属走运。</p><ol><li data-pid="gbyYFJiy"><span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E5%BE%AA%E7%8E%AF%E5%B1%95%E5%BC%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">循环展开<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>，例：</li></ol><div class="highlight"><pre><code class="language-text">for (int i = 0; i &lt; 100; i++) &#123;<br>    f(i);<br>&#125;</code></pre></div><p data-pid="NHRq8c9B">可以改写成：</p><div class="highlight"><pre><code class="language-text">for (int i = 0; i &lt; 100;) &#123;<br>    f(i++); f(i++); f(i++); f(i++);<br>&#125;</code></pre></div><p data-pid="jJQRGLXz">这个操作减少了循环中 i &lt; 100 的判断次数以及 goto 的次数</p><p data-pid="UuWSNY8z">2. 优化<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">求值顺序<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>，比如：</p><div class="highlight"><pre><code class="language-text">int sum = sum0 + sum1 + sum2 + sum3;</code></pre></div><p data-pid="1n0tYafw">可以改写成：</p><div class="highlight"><pre><code class="language-text">int t1 = sum0 + sum1;<br>int t2 = sum2 + sum3;<br>int sum = t1 + t2;</code></pre></div><p data-pid="bH8APBMb">看似都是3个加法，但是后者可以利用指令级并行加速。</p><p data-pid="LdXljz1_">1 2 综合运用的例子：</p><div class="highlight"><pre><code class="language-text">int sum0 = 0;<br>int sum1 = 0;<br>int sum2 = 0;<br>int sum3 = 0;<br>for (int i = 0; i &lt; 100; i+=4) &#123;<br>   sum0 += a[i];<br>   sum1 += a[i+1];<br>   sum2 += a[i+2];<br>   sum3 += a[i+3];<br>&#125;<br>int sum = sum0 + sum1 + sum2 + sum3;</code></pre></div><p data-pid="nKHBVh6k">3. 优化高维数组寻址</p><p data-pid="IFuPksNs">例：</p><div class="highlight"><pre><code class="language-text">for (int i = 1; i &lt; n; i++) &#123;<br>   for (int j = 1; j &lt; n; j++) &#123;<br>      for (int k = 1; k &lt; n; k++) &#123;<br>         dp[i][j][k] = dp[i][j][k-1] + dp[i-1][j][k] + dp[i][j-1][k];<br>      &#125;<br>   &#125;<br>&#125;</code></pre></div><p data-pid="yKNOGJJF">可以改写为：</p><div class="highlight"><pre><code class="language-text">for (int i = 1; i &lt; n; i++) &#123;<br>   for (int j = 1; j &lt; n; j++) &#123;<br>      auto &amp;dp_ij = dp[i][j];<br>      auto &amp;dp_i1j = dp[i-1][j];<br>      auto &amp;dp_ij1 = dp[i][j-1];<br>      for (int k = 1; k &lt; n; k++) &#123;<br>         dp_ij [k] = dp_ij[k-1] + dp_i1j [k] + dp_ij1[k];<br>      &#125;<br>   &#125;<br>&#125;</code></pre></div><p data-pid="k9JKv9I9">4. 优化<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">嵌套数组<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>寻址</p><p data-pid="HUd79DwM">例：</p><div class="highlight"><pre><code class="language-text">for (int i = 0; i &lt; n; i++) &#123;<br>  a[i] = b[c[d[i]]];<br>&#125;</code></pre></div><p data-pid="KoRpVM9k">可以改写为：</p><div class="highlight"><pre><code class="language-text">for (int i = 0; i &lt; n; i++) &#123;<br>  helper[i] = c[d[i]];<br>&#125;<br>for (int i = 0; i &lt; n; i++) &#123;<br>  a[i] = b[helper[i]];<br>&#125;</code></pre></div><p data-pid="HnuPpr6W">理论基础：用好 cache，连续的内存会自动被读入 cache。多次嵌套的<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%95%B0%E7%BB%84%E5%AF%BB%E5%9D%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">数组寻址<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>会让 cache 命中率变低。</p><p data-pid="Idyt0Jh1">实战例子：在<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">后缀数组<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>的 20 行模板中：</p><div class="highlight"><pre><code class="language-text">int wa[MAXN], wb[MAXN], wv[MAXN], ws[MAXN];<br>inline bool cmp(int *r, int a, int b, int len) &#123;<br>    return r[a]==r[b] &amp;&amp; r[a+len]==r[b+len];<br>&#125;<br>void SA(char *r, int *sa, int n, int m)<br>&#123;<br>    int i, j, p, *x = wa, *y = wb, *t;<br>    for (i = 0; i &lt; m; i++) ws[i] = 0;<br>    for (i = 0; i &lt; n; i++) ws[x[i] = r[i]]++;<br>    for (i = 1; i &lt; m; i++) ws[i] += ws[i - 1];<br>    for (i = n - 1; i &gt;= 0; i--) sa[--ws[x[i]]] = i;<br>    for (j = p = 1; p &lt; n; j &lt;&lt;= 1, m = p)<br>    &#123;<br>        for (p = 0, i = n - j; i &lt; n; i++) y[p++] = i;<br>        for (i = 0; i &lt; n; i++) if (sa[i] &gt;= j) y[p++] = sa[i] - j;<br>        for (i = 0; i &lt; m; i++) ws[i] = 0;<br>        for (i = 0; i &lt; n; i++) ws[wv[i] = x[y[i]]]++;<br>        for (i = 1; i &lt; m; i++) ws[i] += ws[i - 1];<br>        for (i = n - 1; i &gt;= 0; i--) sa[--ws[wv[i]]] = y[i];<br>        for (t=x,x=y,y=t, x[sa[0]]=0, p=i=1; i&lt;n; i++)<br>            x[sa[i]] = cmp(y,sa[i-1],sa[i],j) ? p-1 : p++;<br>    &#125;<br>&#125;</code></pre></div><p data-pid="y97RCypa">这里 “for (i &#x3D; 0; i &lt; n; i++) ws[wv[i] &#x3D; x[y[i]]]++;”顺手实现了 wv[i] &#x3D; x[y[i]]，然后下两行 “for (i &#x3D; n - 1; i &gt;&#x3D; 0; i–) sa[–ws[wv[i]]] &#x3D; y[i];”实际上实现了一个稳定的<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">计数排序<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>，这里使用了 wv[i]，没有直接使用 x[y[i]]，就是优化了数组寻址。</p><p data-pid="9nml8VBd">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Update：连续被点赞，增加几条 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p data-pid="FONXH2ec">5. Java 黑科技</p><p data-pid="Y6xLzCPX">我们那个时代，ACM里 C++11都不开。但是 JDK 可是全功能的……</p><p data-pid="MvlHUIBi">因此可以使用 Java 的黑科技包括但不限于：</p><p data-pid="5e0wagOE">5.1 自定义栈大小，Java thread 有：</p><div class="highlight"><pre><code class="language-text">public Thread(ThreadGroup group,<br>      Runnable target,<br>      String name,<br>      long stackSize)</code></pre></div><p data-pid="IUHSR6eZ">再也不用担心在退化成链表的图里面DFS爆栈了</p><p data-pid="gcR7C9A1">5.2 多线程</p><p data-pid="eMX7v_b1">由于 Thread 是内置功能，Java 又有比 C++ 更长的时限，而 Java 单纯计算的效率没比 C++ 慢出太多。所以可以使用多线程计算…… 具体实现可以是起若干个线程，然后用一个 CyclicBarrier 等待所有线程跑完，输出结果</p><p data-pid="Wqxf7NFu">5.3 作图</p><p data-pid="5Cn2ZFP7">是的，JDK 自带 JavaFx，可以做一个 GUI，把数据可视化。</p><p data-pid="FUucKasx">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Update：岛娘亲自点赞了，再更几条！ &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p data-pid="I830PVTb">6. 打表找规律</p><p data-pid="JX5fl8fD">6.1 加速篇：结合 5.2，你可以写出比别人更猛的打表程序。如果测试机有 C++ 版线程库更佳</p><p data-pid="Qb9I2mwO">6.2 找<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E9%80%92%E6%8E%A8%E5%85%AC%E5%BC%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">递推公式<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span></p><p data-pid="HUlTgBkP">通项公式是多项式的数列，都可以靠解方程解出来通项公式</p><p data-pid="oDaveCTw">比如说一个数列，1 4 9 16 25…… 你也不知道他是啥（这怎么可能看不出是啥），但是盲猜他的通项公式是多项式，假设最高项是三次方，那么 f(x) &#x3D; ax^3 + bx^2 + cx^1 + d，问题就变成了个解方程问题：</p><div class="highlight"><pre><code class="language-text">1 = a + b + c + d<br>4 = 8a + 4b + 2c + d<br>9 = 27a + 9b + 3c + d<br>16 = 64a + 16b + 4c + d</code></pre></div><p data-pid="IzlupWt3">比如说又打表得出一个数列 1 1 2 3 5 8 13 21…，你也不知道他是啥，但是如果你猜他的递推公式是 f[i] &#x3D; a * <i>f[i-1] + b *</i> f[i-2] + c * f[i-3] + d 这样的，那么问题就变成了个解方程问题：</p><div class="highlight"><pre><code class="language-text">3 = 2a + b + c + d<br>5 = 3a + 2b + c + d<br>8 = 5a + 3b + 2c + d<br>13 = 8a + 5b + 3c + d</code></pre></div><p data-pid="cayp0tSI">嗯，可以解得 a &#x3D; 1 b &#x3D; 1 c &#x3D; 0 d &#x3D; 0，于是递推公式就暴力解方程解出来了。</p><p data-pid="BssgiTIP">6.3 暴力DFS，枚举思路贪心对拍</p><p data-pid="pc_hAFOj">常见于盲猜是个贪心，但是不知道怎么贪。可以先写个<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">暴力解法<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>，然后编若干<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">测试数据<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>，然后枚举思路：贪 xx 大的优先，xx 小的优先 等。某条思路和暴力解法解一样就 Bingo 了</p><p data-pid="Vu-4MxtZ">7. 这里不推荐<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E5%86%85%E5%B5%8C%E6%B1%87%E7%BC%96&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">内嵌汇编<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>。因为每个平台对内嵌汇编的支持都不一样，没法训练。而且2202年了，手撸的汇编还真不一定打得过编译器。。。</p><p data-pid="HHEE0oao">8. 调整分支语句的逻辑顺序</p><p data-pid="aNfBnN6S">比如：</p><div class="highlight"><pre><code class="language-text">if (cond1) &#123;<br>    do_something1();<br>&#125; else if (cond2) &#123;<br>    do_something2();<br>&#125; else if (cond3) &#123;<br>    do_something3();<br>&#125;</code></pre></div><p data-pid="MaTr3rCF">如果 cond1，cond2，cond3 不相关，且绝大多数情况下都是 cond2，可以改写成：</p><div class="highlight"><pre><code class="language-text">if (cond2) &#123;<br>    do_something2();<br>&#125; else if (cond1) &#123;<br>    do_something1();<br>&#125; else if (cond3) &#123;<br>    do_something3();<br>&#125;</code></pre></div><p data-pid="lINRu0FR">9. Struct &gt; N个数组</p><p data-pid="SUYhYnLS">常见的例子是：</p><div class="highlight"><pre><code class="language-text">struct Interval &#123;<br>  int left;<br>  int right;<br>  int value;<br>&#125;;<p></p><p>Interval intervals[100000];</p></code></pre></div><p data-pid="Psl6OkGx">vs</p><div class="highlight"><pre><code class="language-text">int interval_left[100000];<br>int interval_right[100000];<br>int value[100000];</code></pre></div><p data-pid="UEtUAYGL">前者的效率会更高，因为随机访问 intervals[i] 的时候，所在的一个内存页都会从主内存放到 cache，而访问 interval[i] 就很可能顺手访问 interval[i+1], interval[i+2]，写成 struct <span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E7%BC%93%E5%AD%98%E5%91%BD%E4%B8%AD%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">缓存命中率<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>就会高。而拆成三个数组的话，访问 interval_right[i] 的时候，可能就会把 interval_left[i] 的缓存顶掉。下次访问 interval_left[i+1] 的时候就又要从主<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">内存寻址<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>了</p><p data-pid="wFNSuCGZ">其实写完回头看看，这里提到的绝大多数优化性能的操作都是正道…… 可以参考《<span><a class="RichContent-EntityWord css-pgtd2j" data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2590083542%7D" target="_blank">深入理解计算机系统<svg width="10px" height="10px" viewbox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"/></svg></a></span>》第五章，有详细介绍。在测试数据不够强的情况下，用一个略低效的算法，但低空卡时间飞过是有可能的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Welcome_to_comment</title>
    <link href="/2023/01/17/Welcome_to_comment/"/>
    <url>/2023/01/17/Welcome_to_comment/</url>
    
    <content type="html"><![CDATA[<h1 id="Welcome-to-Comment-Area"><a href="#Welcome-to-Comment-Area" class="headerlink" title="Welcome to Comment Area!"></a>Welcome to Comment Area!</h1><p><img src="/2023/01/17/Welcome_to_comment/1.png" srcset="/img/loading.gif" lazyload alt="You can comment now!"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>comment</title>
    <link href="/2023/01/15/comment/"/>
    <url>/2023/01/15/comment/</url>
    
    <content type="html"><![CDATA[<p>Utterances评论的代码在下面：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;script src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://utteranc.es/client.js&quot;</span><br>    repo<span class="hljs-operator">=</span><span class="hljs-string">&quot;[ENTER REPO HERE]&quot;</span><br>    issue-term<span class="hljs-operator">=</span><span class="hljs-string">&quot;pathname&quot;</span><br>    label<span class="hljs-operator">=</span><span class="hljs-string">&quot;Comment&quot;</span><br>    theme<span class="hljs-operator">=</span><span class="hljs-string">&quot;photon-dark&quot;</span><br>    crossorigin<span class="hljs-operator">=</span><span class="hljs-string">&quot;anonymous&quot;</span><br>    async&gt;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>直接将它插入到你的博客中对应的位置即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Record</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>All-Test</title>
    <link href="/2023/01/14/All-Test/"/>
    <url>/2023/01/14/All-Test/</url>
    
    <content type="html"><![CDATA[<h2 id="Start-Test"><a href="#Start-Test" class="headerlink" title="Start Test"></a>Start Test</h2><h2 id="1-代码段"><a href="#1-代码段" class="headerlink" title="1.代码段"></a>1.代码段</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-图片"><a href="#2-图片" class="headerlink" title="2.图片"></a>2.图片</h2><p>Picture 1:</p><p><img src="/2023/01/14/All-Test/C++.png" alt="This is C++"></p><p>Picutre 2:</p><p><img src="/2023/01/14/All-Test/Back_Ground.png" alt="This is Back_Ground"></p><h2 id="3-链接"><a href="#3-链接" class="headerlink" title="3.链接"></a>3.链接</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a><a href="https://github.com/">Github</a></h3><h3 id="XMC-NULL’s-Blog"><a href="#XMC-NULL’s-Blog" class="headerlink" title="XMC-NULL’s Blog"></a><a href="https://xmc-null.github.io/">XMC-NULL’s Blog</a></h3><h3 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a><a href="https://zhuanlan.zhihu.com/p/99319314">Markdown 语法</a></h3><h2 id="4-Markdown语法"><a href="#4-Markdown语法" class="headerlink" title="4.Markdown语法"></a>4.Markdown语法</h2><p><strong>I am 加粗</strong></p><p><strong>I am 加粗 too</strong></p><p><em>I am 倾斜</em></p><p><em>I am 倾斜 too</em></p><p><em><strong>I am 加粗倾斜</strong></em></p><p><del>I am 删除线</del></p><p>分割线(* * *)：</p><hr><blockquote><p>引用</p></blockquote><blockquote><p>在引用的文字前加 &gt; 即可。 在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; 。</p></blockquote><p>列表内容:</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><p>用’\‘强制换行</p><p>就像这样：</p><p>在操场上沿一直线排列着n堆石子，现要将石子有次序地合并成一堆。<br>规定每次只能选相邻的两堆石子合并成新的一堆，并将新的一堆石子数计为该次合并的得分。</p><h2 id="5-结尾"><a href="#5-结尾" class="headerlink" title="5.结尾"></a>5.结尾</h2><p>如果以上内容正确渲染，Blog 就搭建完成了</p><h2 id="By-XMC-NULL"><a href="#By-XMC-NULL" class="headerlink" title="By XMC-NULL"></a>By XMC-NULL</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Test-Successful</title>
    <link href="/2023/01/14/Test-Successful/"/>
    <url>/2023/01/14/Test-Successful/</url>
    
    <content type="html"><![CDATA[<h1 id="这些测试选项通过了："><a href="#这些测试选项通过了：" class="headerlink" title="这些测试选项通过了："></a>这些测试选项通过了：</h1><h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><h2 id="2-图片"><a href="#2-图片" class="headerlink" title="2.图片"></a>2.图片</h2><h2 id="3-链接"><a href="#3-链接" class="headerlink" title="3.链接"></a>3.链接</h2><h2 id="4-Markdown语法"><a href="#4-Markdown语法" class="headerlink" title="4.Markdown语法"></a>4.Markdown语法</h2><h2 id="5-通过"><a href="#5-通过" class="headerlink" title="5.通过"></a>5.通过</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230114-Picture-Test</title>
    <link href="/2023/01/14/20230114-Picture-Test/"/>
    <url>/2023/01/14/20230114-Picture-Test/</url>
    
    <content type="html"><![CDATA[<h2 id="Picture-1"><a href="#Picture-1" class="headerlink" title="Picture 1:"></a>Picture 1:</h2><p><img src="/2023/01/14/20230114-Picture-Test/C++.png" alt="This is C++"></p><h2 id="Picutre-2"><a href="#Picutre-2" class="headerlink" title="Picutre 2:"></a>Picutre 2:</h2><p><img src="/2023/01/14/20230114-Picture-Test/Back_Ground.png" alt="This is Back_Ground"></p><h3 id="如果上面两张图可见，那么，测试成功"><a href="#如果上面两张图可见，那么，测试成功" class="headerlink" title="如果上面两张图可见，那么，测试成功"></a>如果上面两张图可见，那么，测试成功</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230114</title>
    <link href="/2023/01/14/20230114/"/>
    <url>/2023/01/14/20230114/</url>
    
    <content type="html"><![CDATA[<p>This is a running test.</p><p>这是一个运行测试</p><p>这是C++测试</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello world&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230113</title>
    <link href="/2023/01/13/20230113/"/>
    <url>/2023/01/13/20230113/</url>
    
    <content type="html"><![CDATA[<p>2023.1.13的测试</p>]]></content>
    
    
    
    <tags>
      
      <tag>Test</tag>
      
      <tag>Null666</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/13/hello-world/"/>
    <url>/2023/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
